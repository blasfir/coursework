# функція EncryptBlock, яка шифрує один блок даних
# функція DecryptBlock, яка розшифровує один блок даних
# функція GenerateRoundKeys, яка розгортає ключ шифрування у послідовність раундових ключів


S1 = [
    0xa9, 0x85, 0xd6, 0xd3, 0x54, 0x1d, 0xac, 0x25, 0x5d, 0x43, 0x18, 0x1e, 0x51, 0xfc, 0xca, 0x63,
    0x28, 0x44, 0x20, 0x9d, 0xe0, 0xe2, 0xc8, 0x17, 0xa5, 0x8f, 0x03, 0x7b, 0xbb, 0x13, 0xd2, 0xee,
    0x70, 0x8c, 0x3f, 0xa8, 0x32, 0xdd, 0xf6, 0x74, 0xec, 0x95, 0x0b, 0x57, 0x5c, 0x5b, 0xbd, 0x01,
    0x24, 0x1c, 0x73, 0x98, 0x10, 0xcc, 0xf2, 0xd9, 0x2c, 0xe7, 0x72, 0x83, 0x9b, 0xd1, 0x86, 0xc9,
    0x60, 0x50, 0xa3, 0xeb, 0x0d, 0xb6, 0x9e, 0x4f, 0xb7, 0x5a, 0xc6, 0x78, 0xa6, 0x12, 0xaf, 0xd5,
    0x61, 0xc3, 0xb4, 0x41, 0x52, 0x7d, 0x8d, 0x08, 0x1f, 0x99, 0x00, 0x19, 0x04, 0x53, 0xf7, 0xe1,
    0xfd, 0x76, 0x2f, 0x27, 0xb0, 0x8b, 0x0e, 0xab, 0xa2, 0x6e, 0x93, 0x4d, 0x69, 0x7c, 0x09, 0x0a,
    0xbf, 0xef, 0xf3, 0xc5, 0x87, 0x14, 0xfe, 0x64, 0xde, 0x2e, 0x4b, 0x1a, 0x06, 0x21, 0x6b, 0x66,
    0x02, 0xf5, 0x92, 0x8a, 0x0c, 0xb3, 0x7e, 0xd0, 0x7a, 0x47, 0x96, 0xe5, 0x26, 0x80, 0xad, 0xdf,
    0xa1, 0x30, 0x37, 0xae, 0x36, 0x15, 0x22, 0x38, 0xf4, 0xa7, 0x45, 0x4c, 0x81, 0xe9, 0x84, 0x97,
    0x35, 0xcb, 0xce, 0x3c, 0x71, 0x11, 0xc7, 0x89, 0x75, 0xfb, 0xda, 0xf8, 0x94, 0x59, 0x82, 0xc4,
    0xff, 0x49, 0x39, 0x67, 0xc0, 0xcf, 0xd7, 0xb8, 0x0f, 0x8e, 0x42, 0x23, 0x91, 0x6c, 0xdb, 0xa4,
    0x34, 0xf1, 0x48, 0xc2, 0x6f, 0x3d, 0x2d, 0x40, 0xbe, 0x3e, 0xbc, 0xc1, 0xaa, 0xba, 0x4e, 0x55,
    0x3b, 0xdc, 0x68, 0x7f, 0x9c, 0xd8, 0x4a, 0x56, 0x77, 0xa0, 0xed, 0x46, 0xb5, 0x2b, 0x65, 0xfa,
    0xe3, 0xb9, 0xb1, 0x9f, 0x5e, 0xf9, 0xe6, 0xb2, 0x31, 0xea, 0x6d, 0x5f, 0xe4, 0xf0, 0xcd, 0x88,
    0x16, 0x3a, 0x58, 0xd4, 0x62, 0x29, 0x07, 0x33, 0xe8, 0x1b, 0x05, 0x79, 0x90, 0x6a, 0x2a, 0x9a,
]


S2 = [
    0x38, 0xe8, 0x2d, 0xa6, 0xcf, 0xde, 0xb3, 0xb8, 0xaf, 0x60, 0x55, 0xc7, 0x44, 0x6f, 0x6b, 0x5b,
    0xc3, 0x62, 0x33, 0xb5, 0x29, 0xa0, 0xe2, 0xa7, 0xd3, 0x91, 0x11, 0x06, 0x1c, 0xbc, 0x36, 0x4b,
    0xef, 0x88, 0x6c, 0xa8, 0x17, 0xc4, 0x16, 0xf4, 0xc2, 0x45, 0xe1, 0xd6, 0x3f, 0x3d, 0x8e, 0x98,
    0x28, 0x4e, 0xf6, 0x3e, 0xa5, 0xf9, 0x0d, 0xdf, 0xd8, 0x2b, 0x66, 0x7a, 0x27, 0x2f, 0xf1, 0x72,
    0x42, 0xd4, 0x41, 0xc0, 0x73, 0x67, 0xac, 0x8b, 0xf7, 0xad, 0x80, 0x1f, 0xca, 0x2c, 0xaa, 0x34,
    0xd2, 0x0b, 0xee, 0xe9, 0x5d, 0x94, 0x18, 0xf8, 0x57, 0xae, 0x08, 0xc5, 0x13, 0xcd, 0x86, 0xb9,
    0xff, 0x7d, 0xc1, 0x31, 0xf5, 0x8a, 0x6a, 0xb1, 0xd1, 0x20, 0xd7, 0x02, 0x22, 0x04, 0x68, 0x71,
    0x07, 0xdb, 0x9d, 0x99, 0x61, 0xbe, 0xe6, 0x59, 0xdd, 0x51, 0x90, 0xdc, 0x9a, 0xa3, 0xab, 0xd0,
    0x81, 0x0f, 0x47, 0x1a, 0xe3, 0xec, 0x8d, 0xbf, 0x96, 0x7b, 0x5c, 0xa2, 0xa1, 0x63, 0x23, 0x4d,
    0xc8, 0x9e, 0x9c, 0x3a, 0x0c, 0x2e, 0xba, 0x6e, 0x9f, 0x5a, 0xf2, 0x92, 0xf3, 0x49, 0x78, 0xcc,
    0x15, 0xfb, 0x70, 0x75, 0x7f, 0x35, 0x10, 0x03, 0x64, 0x6d, 0xc6, 0x74, 0xd5, 0xb4, 0xea, 0x09,
    0x76, 0x19, 0xfe, 0x40, 0x12, 0xe0, 0xbd, 0x05, 0xfa, 0x01, 0xf0, 0x2a, 0x5e, 0xa9, 0x56, 0x43,
    0x85, 0x14, 0x89, 0x9b, 0xb0, 0xe5, 0x48, 0x79, 0x97, 0xfc, 0x1e, 0x82, 0x21, 0x8c, 0x1b, 0x5f,
    0x77, 0x54, 0xb2, 0x1d, 0x25, 0x4f, 0x00, 0x46, 0xed, 0x58, 0x52, 0xeb, 0x7e, 0xda, 0xc9, 0xfd,
    0x30, 0x95, 0x65, 0x3c, 0xb6, 0xe4, 0xbb, 0x7c, 0x0e, 0x50, 0x39, 0x26, 0x32, 0x84, 0x69, 0x93,
    0x37, 0xe7, 0x24, 0xa4, 0xcb, 0x53, 0x0a, 0x87, 0xd9, 0x4c, 0x83, 0x8f, 0xce, 0x3b, 0x4a, 0xb7,
]

KC = [
    0x9e3779b9, 0x3c6ef373, 0x78dde6e6, 0xf1bbcdcc,
    0xe3779b99, 0xc6ef3733, 0x8dde6e67, 0x1bbcdccf,
    0x3779b99e, 0x6ef3733c, 0xdde6e678, 0xbbcdccf1,
    0x779b99e3, 0xef3733c6, 0xde6e678d, 0xbcdccf1b,
]

masks = [0xFC, 0xF3, 0xCF, 0x3F]

# a1 = S1[11]
# print(a1)

# 32-бітне до 4 8-бітних


def to_blocks_8(hex_value):
    hex_value = hex_value & 0xFFFFFFFF
    byte0 = (hex_value >> 24) & 0xFF
    byte1 = (hex_value >> 16) & 0xFF
    byte2 = (hex_value >> 8) & 0xFF
    byte3 = hex_value & 0xFF
    return byte0, byte1, byte2, byte3

# 128-бітне до 4 32-бітних


def to_blocks_32(value):
    value = value & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    block0 = (value >> 96) & 0xFFFFFFFF
    block1 = (value >> 64) & 0xFFFFFFFF
    block2 = (value >> 32) & 0xFFFFFFFF
    block3 = value & 0xFFFFFFFF
    return block0, block1, block2, block3


# 4 8-бітних до 32-бітного
def combine_bytes_8(byte0, byte1, byte2, byte3):
    return (byte0 << 24) | (byte1 << 16) | (byte2 << 8) | byte3

# 4 32-бітних до 128-бітного


def combine_blocks_32(block0, block1, block2, block3):
    return ((block0 & 0xFFFFFFFF) << 96) | \
           ((block1 & 0xFFFFFFFF) << 64) | \
           ((block2 & 0xFFFFFFFF) << 32) | \
           (block3 & 0xFFFFFFFF)


def G(a, b, c, d):

    a1 = S1[a]
    b1 = S2[b]
    c1 = S1[c]
    d1 = S2[d]

    a_ = (a1 & masks[0]) ^ (b1 & masks[1]) ^ (c1 & masks[2]) ^ (d1 & masks[3])
    b_ = (a1 & masks[1]) ^ (b1 & masks[2]) ^ (c1 & masks[3]) ^ (d1 & masks[0])
    c_ = (a1 & masks[2]) ^ (b1 & masks[3]) ^ (c1 & masks[0]) ^ (d1 & masks[1])
    d_ = (a1 & masks[3]) ^ (b1 & masks[0]) ^ (c1 & masks[1]) ^ (d1 & masks[2])

    return a_, b_, c_, d_

# циклічний зсув вправо 64-бітного числа


def rotate_right_8(value):
    value = value & 0xFFFFFFFFFFFFFFFF
    rotated = ((value >> 8) | (value << 56)
               ) & 0xFFFFFFFFFFFFFFFF
    return rotated

# циклічний зсув вліво 64-бітного числа


def rotate_left_8(value):
    value = value & 0xFFFFFFFFFFFFFFFF
    rotated = ((value << 8) | (value >> 56)
               ) & 0xFFFFFFFFFFFFFFFF
    return rotated

# 64-бітне до 2 32-бітних


def split_to_2x32(value):
    value = value & 0xFFFFFFFFFFFFFFFF
    high = (value >> 32) & 0xFFFFFFFF
    low = value & 0xFFFFFFFF
    return high, low

# 2 32-бітних до 64-бітного


def combine_2x32_to_64(high, low):
    high = high & 0xFFFFFFFF
    low = low & 0xFFFFFFFF
    combined = (high << 32) | low
    return combined


def GenerateRoundKeys(key):
    a, b, c, d = to_blocks_32(key)
    keys = []
    for i in range(16):
        a1, b1, c1, d1 = to_blocks_8(a + c - KC[i])
        a2, b2, c2, d2 = G(a1, b1, c1, d1)
        ki0 = combine_bytes_8(a2, b2, c2, d2)
        a3, b3, c3, d3 = to_blocks_8(b + KC[i] - d)
        a4, b4, c4, d4 = G(a3, b3, c3, d3)
        ki1 = combine_bytes_8(a4, b4, c4, d4)
        keys.append(ki0)
        keys.append(ki1)
        if i % 2 == 0:
            cd = combine_2x32_to_64(c, d)
            cd = rotate_left_8(cd)
            c, d = split_to_2x32(cd)
        else:
            ab = combine_2x32_to_64(a, b)
            ab = rotate_right_8(ab)
            a, b = split_to_2x32(ab)
    return keys

# 128-бітне до 2 64-бітних


def split_to_2x64(value):
    value = value & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    high = (value >> 64) & 0xFFFFFFFFFFFFFFFF
    low = value & 0xFFFFFFFFFFFFFFFF
    return high, low

# 2 64-бітних до 128-бітного


def combine_2x64_to_128(high, low):
    high = high & 0xFFFFFFFFFFFFFFFF
    low = low & 0xFFFFFFFFFFFFFFFF
    combined = (high << 64) | low
    return combined


def F(CD, K1, K2):
    C, D = split_to_2x32(CD)
    v1 = (C ^ K1) ^ (D ^ K2)
    v2 = (C ^ K1)
    a1, b1, c1, d1 = to_blocks_8(v1)
    a2, b2, c2, d2 = G(a1, b1, c1, d1)
    G1 = combine_bytes_8(a2, b2, c2, d2)
    S1 = G1 + v2
    a3, b3, c3, d3 = to_blocks_8(S1)
    a4, b4, c4, d4 = G(a3, b3, c3, d3)
    G2 = combine_bytes_8(a4, b4, c4, d4)
    a5, b5, c5, d5 = to_blocks_8(G2 + G1)
    a6, b6, c6, d6 = G(a5, b5, c5, d5)
    G3 = combine_bytes_8(a6, b6, c6, d6)
    C1 = G3 + G2
    D1 = G2 + G1
    C1D1 = combine_2x32_to_64(C1, D1)
    return C1D1


def Encrypt(num, keys):
    L0, R0 = split_to_2x64(num)
    L = [L0]
    R = [R0]
    for i in range(1, 16):
        Li = R[i - 1]
        Ri = L[i - 1] ^ F(R[i - 1], keys[2 * (i - 1)], keys[2 * (i - 1) + 1])
        L.append(Li)
        R.append(Ri)
    L16 = L[14] ^ F(R[14], keys[30], keys[31])
    R16 = R[14]
    C = combine_2x64_to_128(L16, R16)
    return C


def Decrypt(C, keys):
    L16, R16 = split_to_2x64(C)
    L = [0] * 16
    R = [0] * 16
    L[15] = L16
    R[15] = R16
    for i in range(15, 0, -1):
        Ri = L[i]
        Li = R[i] ^ F(L[i], keys[2 * (i - 1)], keys[2 * (i - 1) + 1])
        L[i - 1] = Li
        R[i - 1] = Ri
    num = combine_2x64_to_128(L[0], R[0])
    return num


keys = [
    0x7c8f8c7e, 0xc737a22c, 0xff276cdb, 0xa7ca684a,
    0x2f9d01a1, 0x70049e41, 0xae59b3c4, 0x4245e90c,
    0xa1d6400f, 0xdbc1394e, 0x85963508, 0x0c5f1fcb,
    0xb684bda7, 0x61a4aeae, 0xd17e0741, 0xfee90aa1,
    0x76cc05d5, 0xe97a7394, 0x50ac6f92, 0x1b2666e5,
    0x65b7904a, 0x8ec3a7b3, 0x2f7e2e22, 0xa2b121b9,
    0x4d0bfde4, 0x4e888d9b, 0x631c8ddc, 0x4378a6c4,
    0x216af65f, 0x7878c031, 0x71891150, 0x98b255b0
]

key = 0x0000000000000000000000000000000
num = 0x00102030405060708090a0b0c0d0e0f
RoundKeys = GenerateRoundKeys(key)
print(RoundKeys)
enc = Encrypt(num, keys)
print(hex(enc))
dec = Decrypt(enc, keys)
print(hex(dec))
"""key = int("00102030405060708090a0b0c0d0e0f", 16)
a, b, c, d = to_blocks_32(key)
print(f"a = {a:08X}, b = {b:08X}, c = {c:08X}, d = {d:08X}")"""

'''a, b, c, d = to_blocks_8(0x123000B)
print()
print(hex(a), hex(b), hex(c), hex(d))
abcd = combine_bytes_8(a, b, c, d)
print(abcd)
print(hex(abcd))
a1, b1, c1, d1 = G(a, b, c, d)
print(hex(a1), hex(b1), hex(c1), hex(d1))
a1b1c1d1 = combine_bytes_8(a1, b1, c1, d1)
print(hex(a1b1c1d1))
s = 0x3000B010706234
s1 = rotate_right_8(s)
s2 = rotate_left_8(s)
print(hex(s1))
print(hex(s2))'''
